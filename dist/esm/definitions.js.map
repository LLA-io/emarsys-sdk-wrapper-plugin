{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"AAAA,wCAAwC","sourcesContent":["/// <reference types=\"@capacitor/cli\" />\n\nimport type {\n  SetContactOptions\n} from './interfaces/base';\nimport type { PluginListenerHandle } from '@capacitor/core';\n\nimport type { PushMessageEvent, TokenResult } from './interfaces/push';\nimport type { ITokenInitializationStatus, PushMessageDTO, UserInformationDTO } from './interfaces/pushAndroid';\n\n\ntype ConsoleLogLevels = 'trace' | 'debug' | 'info' | 'warn' | 'error' | 'basic';\n\ndeclare module '@capacitor/cli' {\n  export interface PluginsConfig {\n    EmarsysSDKCustom?: {\n      mobileEngageApplicationCode?: string;\n      merchantId?: string;\n      consoleLogLevels?: ConsoleLogLevels[];\n    };\n  }\n}\n\nexport interface EmarsysSDKCustomPlugin {\n  \n  echo(options: { value: string }): Promise<{ value: string }>;\n  \n  addListener(\n    eventName: 'pushMessageEvent',\n    listenerFunc: (event: PushMessageEvent) => void\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  getUUID(value: string): Promise<{ value: string }>;\n\n  \n  requestPermissions(): Promise<PermissionStatus>;\n\n  checkPermissions(): Promise<PermissionStatus>;\n\n  setContact(options: SetContactOptions): Promise<void>;\n\n  getPushToken(): Promise<TokenResult>;\n\n  register(): Promise<TokenResult>;\n\n  checkPermissions(): Promise<PermissionStatus>;\n\n  clearContact(options: SetContactOptions): Promise<void>;\n\n\n  //----for android\n  setPushTokenFirebase(data: {\n    value: string;\n  }): Promise<ITokenInitializationStatus>;\n\n  \n  setPushMessage(data: PushMessageDTO): Promise<{ value: PushMessageDTO }>;\n  getUserInfo(data: UserInformationDTO): Promise<{ value: unknown }>;\n\n  setUser(data: {\n    value: string;\n  }): Promise<void>;\n\n  clearUser():Promise<void>;\n\n  getDeviceInformation(options?: {\n    value?: string;\n  }): Promise<{ value: string }>;\n\n  trackEvent(options?: { eventName: string, eventAttributes: any }): Promise<{ value: string }>;\n  loadInlineInapp(data: { inAppName: string }): Promise<void>;\n\n  addListener(\n    eventName: 'EmarsysInAppDeepLink',\n    listenerFunc: (event: PushMessageEvent) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'EmarsysInAppApplicationEvent',\n    listenerFunc: (event: PushMessageEvent) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'EmarsysPushDeepLink',\n    listenerFunc: (event: PushMessageEvent) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'EmarsysPushApplicationEvent',\n    listenerFunc: (event: PushMessageEvent) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n  addListener(\n    eventName: 'EmarsysPushNotificationReceived',\n    listenerFunc: (event: PushMessageEvent) => void,\n  ): Promise<PluginListenerHandle> & PluginListenerHandle;\n\n// --------------------------\n\n}\n"]}